<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
import math

"""
This sample PCell implements a library called "MyLib" with a single PCell that
draws a circle. It demonstrates the basic implementation techniques for a PCell 
and how to use the "guiding shape" feature to implement a handle for the circle
radius.

NOTE: after changing the code, the macro needs to be rerun to install the new
implementation. The macro is also set to "auto run" to install the PCell 
when KLayout is run.
"""

def drawCPW(self, wg, wl, length, pos, layer, custom_height = 0):
    dbu = self.layout.dbu

    gg = 2*wg+wl
    #calculate the groundwidth to ground padding times the line + gaps
    gw = self.gp*gg
    
    height = gw*2+gg
    #calculate ground width for a custom height
    if custom_height &gt; gg:
      gw = (custom_height-gg)/2
      height = custom_height
    
    #create the 3 rectangles that make up part of the tline
    #calculate top ground
    tg = ([pos[0]/dbu,(pos[1]+(gg+gw))/dbu],[(pos[0]+length)/dbu,(pos[1]+gg+gw*2)/dbu])
    #draw top ground
    self.cell.shapes(layer).insert(pya.Box(tg[0][0],tg[0][1],tg[1][0],tg[1][1]))
    
    #calculate tlin
    tl = ([pos[0]/dbu,(pos[1]+wg+gw)/dbu],[(pos[0]+length)/dbu,(pos[1]+wg+gw+wl)/dbu])
    #draw tlin
    self.cell.shapes(layer).insert(pya.Box(tl[0][0],tl[0][1],tl[1][0],tl[1][1]))
    
    #calculate bottom ground
    bg = ([pos[0]/dbu,pos[1]/dbu],[(pos[0]+length)/dbu,(pos[1]+gw)/dbu])
    #draw bottom ground
    self.cell.shapes(layer).insert(pya.Box(bg[0][0],bg[0][1],bg[1][0],bg[1][1]))
    
    return height, gw
    
def drawText(self, label, text_size = 16, centre_pos = (0.0,0.0)):
    dbu = self.layout.dbu  #Database unit scale
                
    # Create a subcell for the text PCell
    text_pcell = self.layout.create_cell("TEXT", "Basic", {
        "text": label, 
        "layer": self.textLayer, 
        "mag": text_size  # Scale text size to database units
    })
    #calculating translation to centre text on centre_pos
    width = text_pcell.bbox().width()
    height = text_pcell.bbox().height()
    
    centreVector = [-width/2+centre_pos[0]/dbu,-height/2+centre_pos[1]/dbu]
    # Insert the text PCell into the layout at a position (x=0, y=0)
    t = pya.Trans(pya.Trans.R0, centreVector[0], centreVector[1])  # No rotation, place at (0,0)
    self.cell.insert(pya.CellInstArray(text_pcell.cell_index(), t))
    
def drawOuter(self, innerW, innerH, extended = True):
    dbu = self.layout.dbu
    
    #feedMode is None by default hence the if statements...
    if self.feedMode == "extended":
      extended = True
      
    if self.feedMode == "small":
      extended = False
    
    xpoints = [self.lf2, self.lf2+self.rl, self.lf2+self.rl+innerW, self.lf2+self.rl+innerW+self.rl]

    
    if extended:
      #draw outer feeds
      gg2 = 2*self.wg2+self.wl2
      gl2 = self.gp2*gg2
      outerH = gl2*2+gg2
      drawCPW(self, self.wg2, self.wl2, self.lf2, (0,0), self.lp, gl2*2+gg2)
      drawCPW(self, self.wg2, self.wl2, self.lf2, (innerW+2*self.rl+self.lf2,0), self.lp, gl2*2+gg2)
      
      #fill in gaps
      if outerH &gt; innerH:
      #top box
        tx, ty, bx, by = [self.lf2+self.rl, outerH, innerW+self.rl+self.lf2, outerH-(outerH-innerH)/2]
        self.cell.shapes(self.lp).insert(pya.Box(tx/dbu,ty/dbu,bx/dbu,by/dbu))
        
        #bottom box
        tx, ty, bx, by = [self.lf2+self.rl, (outerH-innerH)/2, innerW+self.rl+self.lf2, 0]
        self.cell.shapes(self.lp).insert(pya.Box(tx/dbu,ty/dbu,bx/dbu,by/dbu))
      
      ggin = self.wl+self.wg*2
      gwin = ggin*self.gp+(outerH-innerH)/2
      
      inner_translation = (self.lf2+self.rl,(outerH-innerH)/2)
      
      gw2 = gl2
      #draw ramp
    else:
      #draw outer feeds
      drawCPW(self, self.wg2, self.wl2, self.lf2, (0,0), self.lp, innerH)
      outerH, gw2 = drawCPW(self, self.wg2, self.wl2, self.lf2, (innerW+2*self.rl+self.lf2,0), self.lp, innerH)
      inner_translation = (self.lf2+self.rl,0)
      
      ggin = self.wl+self.wg*2
      gwin = ggin*self.gp
    
    #calculate ramps
    ramps = [[
    (xpoints[0],gw2+self.wg2+self.wl2),
    (xpoints[1],gwin+self.wg+self.wl),
    (xpoints[1],gwin+self.wg),
    (xpoints[0],gw2+self.wg2)
    ],
    [
    (xpoints[3],gw2+self.wg2+self.wl2),
    (xpoints[2],gwin+self.wg+self.wl),
    (xpoints[2],gwin+self.wg),
    (xpoints[3],gw2+self.wg2)
    ],
    [
    (xpoints[0],0),
    (xpoints[1],0),
    (xpoints[1],gwin),
    (xpoints[0],gw2)
    ], 
    [
    (xpoints[0],gw2+self.wg2*2+self.wl2),
    (xpoints[1],gwin+self.wg*2+self.wl),
    (xpoints[1],outerH),
    (xpoints[0],outerH)
    ],
    [
    (xpoints[3],0),
    (xpoints[2],0),
    (xpoints[2],gwin),
    (xpoints[3],gw2)
    ], 
    [
    (xpoints[3],gw2+self.wg2*2+self.wl2),
    (xpoints[2],gwin+self.wg*2+self.wl),
    (xpoints[2],outerH),
    (xpoints[3],outerH)
    ]
    ]
      
    #draw ramps
    for i in ramps:
      
      #points object with database units scaling
      ramp_points = [pya.Point(x/dbu,y/dbu) for x,y in i]
      self.cell.shapes(self.lp).insert(pya.Polygon(ramp_points))
    
    return inner_translation[0], inner_translation[1]
    
def drawFeeds(self, lx, ly, translate = (0,0)):
    #calculate box
    tx = translate[0]
    ty = translate[1]
      
    dbu = self.layout.dbu
    # This is the main part of the implementation: create the layout
    
    #draw the feeds
    innerW = self.lf+self.wg*2+lx+tx+self.lf
    innerH = (self.wg*2)*(self.gp*2+1)+self.wl*(self.gp*2+1)
    gg = 2*self.wg + self.wl
    gh = self.gp*gg
    
    #draw outer feeds and translate inner feeds
    if self.feedType == "stepped":
      tx, ty = drawOuter(self, innerW, innerH)
      #I can't believe it only took 1 extra line of code to get this to work at least my code was somewhat extendable haha
        
    drawCPW(self, self.wg, self.wl, self.lf, (tx,ty), self.lp)
    drawCPW(self, self.wg, self.wl, self.lf, (self.lf+self.wg*2+lx+tx,0+ty), self.lp)
    
    
    #fill in missing ground planes
    tg = ([self.lf+tx, gh+self.wg*2+self.wl/2+ly/2+ty],[self.lf+self.wg*2+lx+tx, innerH+ty])
    self.cell.shapes(self.lp).insert(pya.Box(tg[0][0]/dbu,tg[0][1]/dbu,tg[1][0]/dbu,tg[1][1]/dbu))
    
    #bottom plane
    bg = ([self.lf+tx, 0+ty],[self.lf+self.wg*2+lx+tx, gh+self.wg+self.wl/2-(ly/2+self.wg)+ty])
    self.cell.shapes(self.lp).insert(pya.Box(bg[0][0]/dbu,bg[0][1]/dbu,bg[1][0]/dbu,bg[1][1]/dbu))
    
    #calculateCentrePosition
    outputs = {
    "centrex" : self.lf+self.wg+lx/2+tx,
    "centrey" : innerH/2+ty,
    }
    return outputs
    

class CPW(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the circle
  """

  def __init__(self):

    # Important: initialize the super class
    super(CPW, self).__init__()

    # declare the parameters
    #layer 
    self.param("lp", self.TypeLayer, "Layer", default=pya.LayerInfo(13, 0))
    #text label layer properties
    self.param("showText", self.TypeBoolean, "Show text", default = True)
    self.param("textLayer", self.TypeLayer, "Text Layer", default=pya.LayerInfo(1, 0))
    self.param("textString", self.TypeString, "Custom label (auto generated if empty)", default="")
    self.param("textSize", self.TypeDouble, "Font Size", default=16)
    self.param("textPadding", self.TypeDouble, "Font Padding", default=10)
    #set impedance to be displayed in the auto-generated text
    self.param("impedance", self.TypeDouble, "Characteristic Impedance", default=50)
    
    #feed parameters
    self.param("ll", self.TypeDouble, "Length", default=100)
    self.param("wl", self.TypeDouble, "Line Width", default=14)
    self.param("wg", self.TypeDouble, "Gap Width", default=9)
    self.param("gp", self.TypeDouble, "Ground width = x times ground-ground gap, x = ", default=3)
    
    #outer feed parameters
    self.param("lf2", self.TypeDouble, "Outer Feed length", default=50)
    self.param("wl2", self.TypeDouble, "Outer Feed Line thickness", default=20)
    self.param("wg2", self.TypeDouble, "Outer Waveguide gap width", default=13)
    self.param("rl", self.TypeDouble, "RampLength", default=20)
    self.param("gp2", self.TypeDouble, "Outer Ground width = x times ground-ground gap, x = ", default=3)

    #set whether the feeds will be inset or extended off the end of the capacitor or off
    self.param("steppedFeed", self.TypeString, "steppedFeed", default="Off", choices = (["Off","off"],["Inset", "inset"],["Extend","extend"]))
    
    self.param("feedMode", self.TypeString, "Outer Feed Size", 
                default="series", choices=(["Extended", "extended"],["Small","small"]))

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "CPW(L=" + str(self.ll) + ",Z0 =" + str(self.impedance) + ")"
    
  def produce_impl(self):
    dbu = self.layout.dbu
    # This is the main part of the implementation: create the layout
    #does tline need a feed for probe landing (if the line width is too narrow it needs to be bridged)
    #switch case for the feed modes:
    length = self.ll #bug with initiation having feedmode
    #print(self.feedmode)
    gg = self.wl+2*self.wg
    gw = self.gp*gg
    innerH = gw*2+gg
    #print(self.feedMode)
    x = 0
    mode = "off"
    
    if self.steppedFeed == "off":
      mode = "off"
    if self.steppedFeed == "inset":
      mode = "inset"
    if self.steppedFeed == "extend":
      mode = "extend"
    
    
    
    if mode == "off" or self.feedMode == "Off":
      length = self.ll
      drawCPW(self, self.wg, self.wl, length, [0,0], self.lp)
      x, y = 0,0
    elif mode == "inset":
      length = self.ll-2*self.lf2
      x, y = drawOuter(self, length, innerH)
      drawCPW(self, self.wg, self.wl, length, [x,y], self.lp)
    elif mode == "extend":
      length = self.ll
      x, y = drawOuter(self, length, innerH)
      drawCPW(self, self.wg, self.wl, length, [x,y], self.lp)


    #calculate the total gap between the grounds

    
    #calculate label centre position
    textPos = (length/2+x, -(self.textPadding+self.textSize/2))
    
    
    #draw the device label
    if self.showText:
      if self.textString == "":
        drawText(self, "CPW " + str(self.impedance) + " Ohm " + "{:.0f}".format(self.ll) + " um",self.textSize, centre_pos = textPos)
      else:
        drawText(self, self.textString, self.textSize, textPos)

class MIM_Capacitor(pya.PCellDeclarationHelper):
  """
  MIM capacitor object 
  """

  def __init__(self):

    # Important: initialize the super class
    super(MIM_Capacitor, self).__init__()

    # declare the parameters
    
    #capacitor layers
    self.param("lp", self.TypeLayer, "BondpadLayer", default=pya.LayerInfo(13, 0))
    self.param("ld", self.TypeLayer, "DielectricLayer", default=pya.LayerInfo(10, 0))
    self.param("lb", self.TypeLayer, "BottomPlateLayer", default=pya.LayerInfo(3, 0))
    


    #Parameters for the MIM capacitor
    self.param("lx", self.TypeDouble, "Top Plate Length X", default=20)
    self.param("ly", self.TypeDouble, "Top Plate Length Y", default=20)
    self.param("pd", self.TypeDouble, "Dielectric padding", default=4)
    self.param("pb", self.TypeDouble, "Bottom plate padding", default=2)
    self.param("gap", self.TypeDouble, "Dielectric thickness nm", default=160)
    self.param("er", self.TypeDouble, "Relative Permittivity", default=7.0)
    
    #Two capacitor types: Series and shunt 
    self.param("mode", self.TypeString, "Capacitor Mode", 
                default="series", choices=(["Series", "series"],["Shunt","shunt"]))
                
    #set overlap for top plate and bottom plate metal layers
    self.param("lo", self.TypeDouble, "Metal overlap", default=2)
    #set shunt to ground width
    self.param("sw", self.TypeDouble, "Shunt width", default=10)
    
    #parameters for the feeds
    self.param("lf", self.TypeDouble, "Feed length", default=20)
    self.param("wl", self.TypeDouble, "Feed Line thickness", default=14)
    self.param("wg", self.TypeDouble, "Waveguide gap width", default=9)
    self.param("gp", self.TypeDouble, "Ground width = x times ground-ground gap, x = ", default=3)
    
    #feed options 
    self.param("feedType", self.TypeString, "Feed type", 
                default="series", choices=(["Single", "single"],["Stepped","stepped"]))
                
    self.param("feedMode", self.TypeString, "Outer Feed Size", 
                default="series", choices=(["Extended", "extended"],["Small","small"]))
    
    #Set outer feed parameters
    self.param("lf2", self.TypeDouble, "Outer Feed length", default=20)
    self.param("wl2", self.TypeDouble, "Outer Feed Line thickness", default=24)
    self.param("wg2", self.TypeDouble, "Outer Waveguide gap width", default=15.1)
    self.param("rl", self.TypeDouble, "RampLength", default=20)
    self.param("gp2", self.TypeDouble, "Outer Ground width = x times ground-ground gap, x = ", default=3)
    
    

    
    #text parameters
    self.param("textLayer", self.TypeLayer, "Text Layer", default=pya.LayerInfo(1, 0))
    #set custom string dialogue
    self.param("textString", self.TypeString, "Custom label (auto generated if empty)", default="")
    #set text size
    self.param("textSize", self.TypeDouble, "Font Size", default=16)
    #target impedance
    self.param("textPadding", self.TypeDouble, "Font Padding", default=10)
    #target impedance


  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "MIM_CAP(LX=" + str(self.lx) + ",LY=" + str(self.ly) + ")"
  
  def produce_impl(self):

    dbu = self.layout.dbu
  
    #draw the feeds
    
    outputs = drawFeeds(self, self.lx, self.ly, (0,0))
    centrex = outputs["centrex"]
    centrey = outputs["centrey"]

    #calculate capacitor plate positions
    #calculating top bond pad box positions (padding informs the other two layers)

    topPad = ([centrex-self.lx/2, centrey-self.ly/2],[centrex+self.lx/2, centrey+self.ly/2])
    
    #draw top pad
    self.cell.shapes(self.lp).insert(pya.Box(topPad[0][0]/dbu,topPad[0][1]/dbu,topPad[1][0]/dbu,topPad[1][1]/dbu))
    #draw dielectric
    pd = self.pd
    self.cell.shapes(self.ld).insert(pya.Box((topPad[0][0]-pd)/dbu,(topPad[0][1]-pd)/dbu,(topPad[1][0]+pd)/dbu,(topPad[1][1]+pd)/dbu))
    #draw bottom pad
    pb = self.pb
    self.cell.shapes(self.lb).insert(pya.Box((topPad[0][0]-pb)/dbu,(topPad[0][1]-pb)/dbu,(topPad[1][0]+pb)/dbu,(topPad[1][1]+pb)/dbu))
    #draw feeds
    mode = "series"
    if self.mode == "series":
      mode = "series"
    else:
      mode = "shunt"
    
    if mode == "series":
      #draw series feeds
      rFeed = ([centrex+self.lx/2,centrey-self.wl/2],[centrex+self.lx/2+self.wg,centrey+self.wl/2])
      self.cell.shapes(self.lp).insert(pya.Box((rFeed[0][0])/dbu,(rFeed[0][1])/dbu,(rFeed[1][0])/dbu,(rFeed[1][1])/dbu))
      
      lFeed = ([centrex-self.lx/2-self.wg-self.lo,centrey-self.wl/2],[centrex-self.lx/2-self.pb,centrey+self.wl/2])
      self.cell.shapes(self.lb).insert(pya.Box((lFeed[0][0])/dbu,(lFeed[0][1])/dbu,(lFeed[1][0])/dbu,(lFeed[1][1])/dbu))
    elif mode == "shunt":
      #draw series feeds
      rFeed = ([centrex+self.lx/2,centrey-self.wl/2],[centrex+self.lx/2+self.wg,centrey+self.wl/2])
      self.cell.shapes(self.lp).insert(pya.Box((rFeed[0][0])/dbu,(rFeed[0][1])/dbu,(rFeed[1][0])/dbu,(rFeed[1][1])/dbu))
      
      lFeed = ([centrex-self.lx/2-self.wg,centrey-self.wl/2],[centrex-self.lx/2,centrey+self.wl/2])
      self.cell.shapes(self.lp).insert(pya.Box((lFeed[0][0])/dbu,(lFeed[0][1])/dbu,(lFeed[1][0])/dbu,(lFeed[1][1])/dbu))
      
      #draw ground feeds
      #draw top feed
      tFeed = ([centrex-self.sw/2,centrey+self.ly/2+self.pb],[centrex+self.sw/2,centrey+self.ly/2+self.wg+self.lo])
      self.cell.shapes(self.lb).insert(pya.Box((tFeed[0][0])/dbu,(tFeed[0][1])/dbu,(tFeed[1][0])/dbu,(tFeed[1][1])/dbu))
      
      #draw bottom feed
      bFeed = ([centrex-self.sw/2,centrey-self.ly/2-self.pb],[centrex+self.sw/2,centrey-self.wg-self.lo-self.ly/2])
      self.cell.shapes(self.lb).insert(pya.Box((bFeed[0][0])/dbu,(bFeed[0][1])/dbu,(bFeed[1][0])/dbu,(bFeed[1][1])/dbu))
    
    #calculate label centre position
    textPos = (centrex, -(self.textPadding+self.textSize/2))
    
    #estimate capacitance
    e0 = 8.85418782e-12
    feed_overlap = self.wl*self.pb
    plate_area = self.lx*self.ly
    total_area = feed_overlap+plate_area
    C = (self.er*e0*total_area)*dbu**2*1e-6/(self.gap*1e-9)*1e12
    
    #draw the device label
    
    if self.textString == "":
      drawText(self, "MIM CAP " + "{:.3f}".format(C) + " pF ",self.textSize, centre_pos = textPos)
    else:
      drawText(self, self.textString, self.textSize, textPos)

class Spiral_Inductor(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the circle
  """

  def __init__(self):

    # Important: initialize the super class
    super(Spiral_Inductor, self).__init__()

    # declare the parameters
    
    #inductor layers
    self.param("lp", self.TypeLayer, "Bondpad Layer", default=pya.LayerInfo(13, 0))
    self.param("ld", self.TypeLayer, "Dielectric Layer", default=pya.LayerInfo(10, 0))
    self.param("lb", self.TypeLayer, "Bottom Plate Layer", default=pya.LayerInfo(3, 0))
     
    #Parameters for the CPW inductor
    self.param("nt", self.TypeDouble, "Number of Turns", default=3)
    self.param("dout", self.TypeDouble, "Outder Diameter", default=50)
    self.param("din", self.TypeDouble, "Inner Diameter", default=18)
    self.param("w", self.TypeDouble, "Inductor Conductor Width", default=4)
    self.param("s", self.TypeDouble, "Gap between coils (zero for auto)", default=1)
    self.param("pd", self.TypeDouble, "Dielectric padding", default=4)
    self.param("pb", self.TypeDouble, "Bottom plate padding", default=0)
    
    #SiN layer modes
    self.param("dielectric", self.TypeString, "Dielectric Mode", 
            default="series", choices=(["Patch", "patch"],["Via","via"]))
    
    #parameters for the feeds
    self.param("lf", self.TypeDouble, "Feed length", default=20)
    self.param("wl", self.TypeDouble, "Feed Line thickness", default=9)
    self.param("wg", self.TypeDouble, "Waveguide gap width", default=14)
    self.param("gp", self.TypeDouble, "Ground width = x times ground-ground gap, x = ", default=3)
 
    #Set outer feed parameters
    self.param("lf2", self.TypeDouble, "Outer Feed length", default=20)
    self.param("wl2", self.TypeDouble, "Outer Feed Line thickness", default=9)
    self.param("wg2", self.TypeDouble, "Outer Waveguide gap width", default=14)
    self.param("rl", self.TypeDouble, "RampLength", default=20)
    self.param("gp2", self.TypeDouble, "Outer ground width = x times ground-ground gap, x = ", default=3)
    
    #Feed mode
    self.param("feedType", self.TypeString, "Feed mode", 
                default="series", choices=(["Single", "single"],["Stepped","stepped"]))
                
    self.param("feedMode", self.TypeString, "Outer Feed Size", 
                default="series", choices=(["Extended", "extended"],["Small","small"]))

    #set overlap for top plate and bottom plate metal layers
    self.param("lo", self.TypeDouble, "Metal overlap", default=2)
    
    #text parameters
    self.param("textLayer", self.TypeLayer, "Text Layer", default=pya.LayerInfo(1, 0))
    #set custom string dialogue
    self.param("textString", self.TypeString, "Custom label (auto generated if empty)", default="")
    #set text size
    self.param("textSize", self.TypeDouble, "Font Size", default=16)
    #target impedance
    self.param("textPadding", self.TypeDouble, "Font Padding", default=10)
    #target impedance
    
    self.spiralPoints = []


  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Spiral Inductor(Dout=" + str(self.dout) + ",Din=" + str(self.din) + "w = " + str(self.w) + "s = " + str(self.s) +")"
    
  def add_one_turn(self, start, dout, path_length, width, spacing):
    pl = path_length
    s = spacing
    w = width
    firstPoint = [start[0]+pl, start[1]]
    self.spiralPoints.append(firstPoint)
    
    secondPoint = [firstPoint[0], firstPoint[1]-pl]
    self.spiralPoints.append(secondPoint)
    
    thirdPoint = [secondPoint[0]-(pl-w-s), secondPoint[1]]
    self.spiralPoints.append(thirdPoint)
    
    last_point = [thirdPoint[0], thirdPoint[1]+(pl-w-s)]
    self.spiralPoints.append(last_point)
    new_width = pl-2*w-2*s
    return last_point, new_width
    
  def generate_spiral(self, centre):
    dbu = self.layout.dbu
    cx = centre[0]
    cy = centre[1]
    dout = self.dout
    din = self.din
    nt = self.nt
    w = self.w
    #print(w)
    if nt &gt; 1:
      s = (((dout-din)/2)-(nt)*w)/(nt-1)
    if nt == 1: #cases to override S are avoiding divide by zero and w as dependent variable 
      s = self.s
    elif self.s != 0: #calculating w and s (width and spacing of the spiral line)
      s = self.s #this was an annoying bug to fix fuck me (I had this line after calculating w)
      w = (((dout-din)/2)-(nt-1)*s)/nt
      
      
      #self.w = w #will test how this behaves later #better leave it because w is good enough ;)
    
    feed_start = [cx-self.wg-self.dout/2, cy]
    self.spiralPoints.append(feed_start)
    feedConnect = [cx-self.dout/2+w/2, cy] #adding 1/8 of a turn to connect to the feed to the spiral
    self.spiralPoints.append(feedConnect)
    path_length = dout-w
    turnStart = [feedConnect[0], cy+dout/2-w/2]#calculating the first point of the first turn of the spiral
    self.spiralPoints.append(turnStart)
    
    for i in range(int(self.nt)):
      #updating the start point and path length from the previous turn, creating concentric turns ;)
      #there must be a better way to do this mathematically using circles or something idk
      #This is what you get when you combine amateur maths with amateur coding and a lot of motivation
      turnStart, path_length = self.add_one_turn(turnStart, dout, path_length, w, s)
    
    tunnel_feed_start = self.spiralPoints[-1][0]-(w/2+self.pb)
    tunnel_feed_end = cx+self.wg+self.dout/2+self.lo
    
    #draw tunneling feed
    feed_points = [pya.Point(tunnel_feed_start/dbu, cy/dbu), pya.Point(tunnel_feed_end/dbu, cy/dbu)]
    self.cell.shapes(self.lb).insert(pya.Path(feed_points, (w+self.pb*2)/dbu))
    
    #adding the dielectric using a path
    dielectric_start = (cx + dout/2)-(dout-din)/2-self.pd
    dielectric_end = (cx + dout/2)+self.pd
    dielectric_points = [pya.Point(dielectric_start/dbu, cy/dbu), pya.Point(dielectric_end/dbu, cy/dbu)]
    self.cell.shapes(self.ld).insert(pya.Path(dielectric_points, (w+self.pd*2)/dbu))
    
    #moving end of spiral to overlap properly with the feed
    self.spiralPoints[-1][1] = cy+w/2
    # Convert to pya.Point objects
    path_points = [pya.Point(x/dbu, y/dbu) for x, y in self.spiralPoints]

    # Create the path
    path = pya.Path(path_points, w/dbu)
    
    self.cell.shapes(self.lp).insert(path)
  
  def produce_impl(self):
    dbu = self.layout.dbu
    
    self.spiralPoints = []
    # This is the main part of the implementation: create the layout
    #draw the feeds
    outputs = drawFeeds(self, self.dout, self.dout)
    centrex = outputs["centrex"]
    centrey = outputs["centrey"]
    
    #generate the spiral (see the function)
    self.generate_spiral((centrex, centrey))
    #print(dbu)
    
    textPos = (centrex, -(self.textPadding+self.textSize/2))
    dout = self.dout*dbu*1e-3 #normalised units must be in mm because converting to dbu here is multiplying by 1e-3
    din = self.din*dbu*1e-3
    #print(self.din)
    rho = (dout-din)/(dout+din)
    davg = (dout + din)/2
    k1 = 2.34#constants for a square inductor
    k2 = 2.75
    u0 = 1.25663706e-6 #permeability of free space
    L = (self.nt**2 * u0 * davg * k1)/(1+ rho * k2)
    #print(L/1e-9)
    #draw the device label
    if self.textString == "":
      drawText(self, "Inductor " + "{:.3f}".format(L/1e-9) + " nH ",self.textSize, centre_pos = textPos)
    else:
      drawText(self, self.textString, self.textSize, textPos)

class Interdigitated_Capacitor(pya.PCellDeclarationHelper):
  """
  The PCell for the interdigitated capacitor
  """

  def __init__(self):

    # Important: initialize the super class
    super(Interdigitated_Capacitor, self).__init__()

    # declare the parameters
    
    #inductor layers
    self.param("lp", self.TypeLayer, "Bondpad Layer", default=pya.LayerInfo(13, 0))

    #Parameters for the CPW interdigitated capacitor
    self.param("nf", self.TypeInt, "Number of Fingers", default=5)
    self.param("w", self.TypeDouble, "Capacitor Vertical Width", default=50)
    self.param("l", self.TypeDouble, "Finger length", default=50)
    self.param("t", self.TypeDouble, "Connection Thickness", default=18)
    self.param("sy", self.TypeDouble, "Vertical Finger Gap", default=1)
    self.param("sx", self.TypeDouble, "Horisontal Finger Gap", default=4)

    #calculation mode
    self.param("useFingerWidth", self.TypeBoolean, "Calculate with finger width (ignores vertical width)", default=False)
    self.param("fw", self.TypeDouble, "Finger Width", default=10)
    
    #parameters for the feeds
    self.param("lf", self.TypeDouble, "Feed length", default=20)
    self.param("wl", self.TypeDouble, "Feed Line thickness", default=9)
    self.param("wg", self.TypeDouble, "Waveguide gap width", default=14)
    self.param("gp", self.TypeDouble, "Ground width = x times ground-ground gap, x = ", default=3)
    
    #Set outer feed parameters
    self.param("lf2", self.TypeDouble, "Outer Feed length", default=20)
    self.param("wl2", self.TypeDouble, "Outer Feed Line thickness", default=9)
    self.param("wg2", self.TypeDouble, "Outer Waveguide gap width", default=14)
    self.param("rl", self.TypeDouble, "RampLength", default=20)
    self.param("gp2", self.TypeDouble, "Outer ground width = x times ground-ground gap, x = ", default=3)
    
    #Feed mode
    self.param("feedType", self.TypeString, "Feed mode", 
                default="series", choices=(["Single", "single"],["Stepped","stepped"]))
                
    self.param("feedMode", self.TypeString, "Outer Feed Size", 
                default="series", choices=(["Extended", "extended"],["Small","small"]))
    
    #text parameters
    self.param("textLayer", self.TypeLayer, "Text Layer", default=pya.LayerInfo(1, 0))
    #set custom string dialogue
    self.param("textString", self.TypeString, "Custom label (auto generated if empty)", default="")
    #set text size
    self.param("textSize", self.TypeDouble, "Font Size", default=16)
    #target impedance
    self.param("textPadding", self.TypeDouble, "Font Padding", default=10)
    #target impedance
    
    self.fingerPoints = []

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    sx = self.sx
    
    return "Interdigitated Capacitor (w=" + str(self.w) + ",l=" + str(self.l) + ", sx = " + str(self.sx) + ", sy = " + str(self.sy) + ", finger w = " + str(self.fingerWidth()) + ")"
    
  def fingerWidth(self):
    if self.useFingerWidth:
      return self.fw
    else:
      return (self.w-(self.nf-1)*self.sy)/(self.nf)
      
  def widthY(self):
    if self.useFingerWidth:
      return self.nf*self.fw+(self.nf-1)*self.sy
    else:
      return self.w
  
  def widthX(self):
    return self.sx+self.t*2+self.l
      
  def calcFingers(self, centre = (0,0)):
    self.fingerPoints = []
    cx, cy = centre
    tx, ty = cx-self.widthX()/2, cy-self.widthY()/2 #translation vector to centre the capacitor on the centre input
    w = self.widthY()#total vertical width
    fw = self.fingerWidth() #finger width
    l = self.l #finger length
    sx, sy = self.sx, self.sy #finger spacing
    n = int(self.nf) #number of fingers
    t = self.t #connection thickness
    
    boxpointsL = (tx,ty,t+tx,w+ty)
    boxpointsR = (self.widthX()-t+tx, ty, self.widthX()+tx, ty+w)
    
    feedL = (tx-self.wg,cy-self.wl/2, tx, cy+self.wl/2)
    feedR = (tx+self.widthX(),cy-self.wl/2, tx+self.wg+self.widthX(), cy+self.wl/2)
    
    self.fingerPoints.append(boxpointsL)
    self.fingerPoints.append(boxpointsR)
    self.fingerPoints.append(feedL)
    self.fingerPoints.append(feedR)
    
    verticalPoints = [i*(w-fw)/(n-1)+ty for i in range(n)] #horisontal points
    print(verticalPoints)
    hp = [t+tx, t+l+tx, t+sx+tx, t+sx+l+tx] #horisontal points
    
    print(ty)
    
    i = 1
    for point in verticalPoints:
      print(point)
      if i % 2 == 1:
        self.fingerPoints.append((hp[0],point,hp[1],point+fw))
      else:
        self.fingerPoints.append((hp[2],point,hp[3],point+fw))
      i+=1
      

    
    print(n)
    
  def drawFingers(self):
    dbu = self.layout.dbu
    
    for corners in self.fingerPoints:
      blx, bly, trx, ty = corners
      
      #print(self.fingerPoints)
      self.cell.shapes(self.lp).insert(pya.Box(blx/dbu, bly/dbu, trx/dbu, ty/dbu))
    
  def produce_impl(self):
    dbu = self.layout.dbu
    
    
    self.spiralPoints = []
    # This is the main part of the implementation: create the layout
    #draw the feeds
    outputs = drawFeeds(self, self.widthX(), self.widthY())
    centrex = outputs["centrex"]
    centrey = outputs["centrey"]
    
    #generate the spiral (see the function)
    self.calcFingers((centrex, centrey))
    self.drawFingers()
    
    textPos = (centrex, -(self.textPadding+self.textSize/2))

    er = 11.9 
    w = self.w*dbu*1e-3 #w in cm
    l = self.l*dbu*1e-3 #l in cm
    N = self.nf #number of fingers
    A1 = 8.85e-12*w
    A2 = 9.92e-12*w

    C = l/w*(er + 1)*((N-3)*A1 + A2)
    #print(L/1e-9)
    #draw the device label
    if self.textString == "":
      drawText(self, "I CAP " + "{:.3f}".format(C*1e15) + " fF ",self.textSize, centre_pos = textPos)
    else:
      drawText(self, self.textString, self.textSize, textPos)     

class MyLib(pya.Library):
  """
  The library where we will put the PCell into 
  """

  def __init__(self):
  
    # Set the description
    self.description = "GaN_PDK_PASSIVES"
    # Create the PCell declarations
    # That would be the place to put in more PCells ...
    self.layout().register_pcell("CPW", CPW())
    self.layout().register_pcell("MIM Capacitor", MIM_Capacitor())
    self.layout().register_pcell("Spiral Inductor", Spiral_Inductor())
    self.layout().register_pcell("Interdigitated Capacitor", Interdigitated_Capacitor())

    self.register("GaN_Lib")


# Instantiate and register the library
MyLib()
</text>
</klayout-macro>
